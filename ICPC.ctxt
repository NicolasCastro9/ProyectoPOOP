#BlueJ class context
comment0.target=ICPC
comment0.text=\r\n\ Clase\ que\ crea\ el\ ICPC\r\n\ \r\n\ @author\ (Nicol\u00E1s\ Castro\ Jaramillo\ y\ Marco\ Antonio\ Alvarez)\ \r\n\ @version\ \ 3.0\ (27/09/2022)\r\n
comment1.params=length\ width
comment1.target=ICPC(int,\ int)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ ICPC\r\n
comment10.params=interA\ interB
comment10.target=void\ removeSign(java.lang.String,\ java.lang.String)
comment10.text=\r\n\ Metodo\ para\ remover\ una\ se\u00F1al\r\n\ @param\ interA\ es\ la\ interseccion\ donde\ empieza\ la\ ruta\ y\ se\ encuentra\ la\ se\u00F1al\r\n\ @param\ interB\ es\ la\ interseccion\ donde\ termina\ la\ ruta\ y\ se\ encuentra\ la\ se\u00F1al\r\n
comment11.params=
comment11.target=java.lang.String[]\ intesections()
comment11.text=\r\n\ Metodo\ que\ devuelve\ las\ intersecciones\ que\ se\ encuentran\ en\ el\ canvas\r\n\ @return\ retorna\ un\ array\ de\ String\ de\ todas\ las\ intersecciones\ en\ orden\ alfabetico\ e\ identificadas\ por\ su\ color\r\n
comment12.params=
comment12.target=java.lang.String[][]\ routes()
comment12.text=\r\n\ Metodo\ que\ devuelve\ las\ rutas\ que\ se\ encuentran\ en\ el\ canvas\r\n\ @return\ retorna\ una\ matriz\ de\ String\ en\ la\ que\ cada\ array\ contiene\ \ la\ ruta\ identificada\ por\ su\ clave\ y\ por\ la\ velocidad\ de\ esta\r\n
comment13.params=
comment13.target=java.lang.String[][]\ signs()
comment13.text=\r\n\ Metodo\ que\ devuelve\ las\ se\u00F1ales\ que\ se\ encuentran\ en\ el\ canvas\r\n\ @return\ retorna\ una\ matriz\ de\ String\ en\ la\ que\ cada\ array\ contiene\ la\ clave\ de\ la\ se\u00F1al\ y\ la\ velocidad\ escrita\ en\ esta\r\n
comment14.params=
comment14.target=java.lang.String[][]\ wrongSigns()
comment14.text=\r\n\ Metodo\ que\ devuelve\ las\ se\u00F1ales\ erroneas\ que\ se\ encuentran\ en\ el\ canvas\r\n\ @return\ retorna\ una\ matriz\ de\ String\ en\ la\ que\ cada\ array\ contiene\ la\ clave\ de\ la\ se\u00F1al\ erronea\ y\ la\ velocidad\ escrita\ en\ esta\r\n
comment15.params=
comment15.target=java.lang.String[][]\ unNecessarySigns()
comment15.text=\r\n\ Metodo\ que\ devuelve\ las\ se\u00F1ales\ innecesarias\ que\ se\ encuentran\ en\ el\ canvas\r\n\ @return\ retorna\ una\ matriz\ de\ String\ en\ la\ que\ cada\ array\ contiene\ la\ clave\ de\ la\ se\u00F1al\ innecesaria\ y\ la\ velocidad\ escrita\ en\ esta\r\n
comment16.params=
comment16.target=int\ totalSignsCost()
comment16.text=\r\n\ Metodo\ que\ calcula\ el\ costo\ total\ de\ implementar\ se\u00F1ales\r\n\ @return\ retorna\ el\ total\ gastado\ en\ implementar\ se\u00F1ales\r\n
comment17.params=
comment17.target=void\ makeInvisible()
comment17.text=\r\n\ Metodo\ que\ hace\ Invisible\ todos\ los\ elementos\ en\ el\ canvas\r\n
comment18.params=
comment18.target=void\ makeVisible()
comment18.text=\r\n\ Metodo\ que\ hace\ visible\ todos\ los\ elementos\ del\ canvas\r\n
comment19.params=
comment19.target=void\ finish()
comment19.text=\r\n\ Metodo\ que\ da\ por\ finalizado\ el\ programa\r\n
comment2.params=length\ width\ cost
comment2.target=ICPC(int,\ int,\ int)
comment2.text=\r\n\ Constructor\ para\ la\ clase\ ICPC\ que\ acepta\ el\ costo\ de\ las\ se\u00F1ales\r\n
comment20.params=
comment20.target=boolean\ ok()
comment20.text=\r\n\ Metodo\ que\ devuelve\ si\ la\ ultima\ operacion\ se\ realizo\ con\ exito\r\n
comment21.params=
comment21.target=void\ createColorDictionary()
comment21.text=\r\n\ Metodo\ privado\ en\ el\ que\ se\ le\ asigna\ una\ clave\ numerica\ a\ cada\ color\ \r\n
comment3.params=cost\ routespeedLimits
comment3.target=ICPC(int,\ int[][])
comment3.text=\r\n\ Constructor\ para\ la\ clase\ ICPC\ que\ acepta\ una\ matriz\ de\ valores\r\n
comment4.params=color\ x\ y
comment4.target=void\ addIntersection(java.lang.String,\ int,\ int)
comment4.text=\r\n\ Metodo\ que\ crea\ un\ objeto\ de\ la\ clase\ Intersection.\r\n\ @param\ color\ \ es\ el\ color\ con\ el\ cual\ se\ identificara\ a\ la\ intersecci\u00F3n.\r\n\ @param\ x\ \ es\ la\ posicion\ en\ el\ eje\ x\ de\ la\ intersecci\u00F3n.\r\n\ @param\ y\ \ es\ la\ posicion\ en\ el\ eje\ y\ de\ la\ intersecci\u00F3n.\r\n
comment5.params=interA\ interB
comment5.target=void\ addRoad(java.lang.String,\ java.lang.String)
comment5.text=\r\n\ Metodo\ que\ crea\ un\ objeto\ de\ la\ clase\ Route.\r\n\ @param\ interA\ \ es\ la\ intersecci\u00F3n\ donde\ empieza\ la\ ruta.\r\n\ @param\ interB\ \ es\ la\ interseccio\u00F3n\ donde\ termina\ la\ ruta.\r\n
comment6.params=interA\ interB\ speedlimit
comment6.target=void\ routeSpeedLimit(java.lang.String,\ java.lang.String,\ int)
comment6.text=\r\n\ Metodo\ que\ a\u00F1ade\ la\ velocidad\ a\ un\ hashmap\ relacionada\ a\ una\ ruta\ dada\r\n\ @param\ interA\ es\ la\ intersecci\u00F3n\ donde\ empieza\ la\ ruta\r\n\ @param\ interB\ es\ la\ interseccion\ donde\ termina\ la\ ruta\r\n\ @param\ speedlimit\ es\ la\ velocidad\ a\ agregar\r\n
comment7.params=interA\ interB\ speedlimit
comment7.target=void\ putSign(java.lang.String,\ java.lang.String,\ int)
comment7.text=\r\n\ Metodo\ que\ crea\ un\ objeto\ de\ la\ clase\ Sign.\r\n\ @param\ interA\ \ es\ la\ intersecci\u00F3n\ donde\ empieza\ la\ ruta.\r\n\ @param\ interB\ \ es\ la\ interseccio\u00F3n\ donde\ termina\ la\ ruta.\r\n\ @param\ speedLimit\ \ el\ limite\ de\ velocidad\ en\ la\ se\u00F1al.\r\n
comment8.params=color
comment8.target=void\ delIntersection(java.lang.String)
comment8.text=\r\n\ Metodo\ para\ remover\ una\ interseccion\r\n\ @param\ color\ \ es\ el\ color\ de\ la\ interseccion\ a\ eliminar\r\n
comment9.params=locationA\ locationB
comment9.target=void\ delRoad(java.lang.String,\ java.lang.String)
comment9.text=\r\n\ Metodo\ para\ remover\ una\ ruta\r\n\ @param\ interA\ es\ la\ interseccion\ donde\ empieza\ la\ ruta\r\n\ @param\ interB\ es\ la\ interseccion\ donde\ termina\ la\ ruta\r\n
numComments=22
