#BlueJ class context
comment0.target=Intersection
comment1.params=color\ x\ y
comment1.target=Intersection(java.lang.String,\ int,\ int)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Intersection\r\n\ @author\ (Nicol\u00E1s\ Castro\ Jaramillo\ y\ Marco\ Antonio\ Alvarez)\ \r\n\ @version\ \ 4.0\ (22/10/2022)\r\n
comment2.params=
comment2.target=void\ makeVisible()
comment2.text=\r\n\ Metodo\ que\ hace\ visible\ a\ la\ interseccion\r\n
comment3.params=
comment3.target=void\ makeInvisible()
comment3.text=\r\n\ metodo\ que\ hace\ invisible\ a\ la\ interseccion\r\n
comment4.params=
comment4.target=java.lang.String\ getIntersection()
comment4.text=\r\n\ metodo\ que\ retorna\ el\ identificador\ de\ la\ interseccion(el\ color)\r\n\ @return\ color\r\n
comment5.params=
comment5.target=void\ removeIntersection()
comment5.text=\r\n\ metodo\ que\ elimina\ la\ interseccion\r\n
comment6.params=r
comment6.target=boolean\ permiteRutas(java.lang.String[][])
comment6.text=\r\n\ metodo\ que\ verifica\ si\ la\ interseccion\ admite\ rutas\r\n\ @return\ retorna\ si\ la\ interseccion\ admite\ rutas\r\n
comment7.params=r
comment7.target=boolean\ seAutoelimina(java.lang.String[][])
comment7.text=\r\n\ metodo\ que\ verifica\ si\ la\ interseccion\ tiene\ la\ capacidad\ de\ autoeliminarse\r\n\ @return,\ retorna\ si\ la\ interseccion\ se\ puede\ autoeliminar\r\n
numComments=8
